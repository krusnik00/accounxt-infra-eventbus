AWSTemplateFormatVersion: 2010-09-09
Description: |
  Complete Event Bus Infrastructure: API Gateway ? SQS (with DLQ) ? Lambda Main ? SNS ? Subscriber SQS (with DLQ) ? Subscriber Lambda Includes subscription filter policy for DUMMY_EVENT. All resources are prefixed to allow multiple independent stacks.

Parameters:
  ResourcePrefix:
    Type: String
    Default: accounxt-event-bus
    Description: Prefix used to name resources in the event bus

Resources:
  # --- API Gateway & Main Queue (Layer 1) ---
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ResourcePrefix}-api

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ResourcePrefix}-dlq

  SqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ResourcePrefix}-sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: send

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourcePrefix}-api-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSQSSendMessage
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt SqsQueue.Arn

  ApiGatewayMethodSend:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${ResourcePrefix}-sqs
        Credentials: !GetAtt ApiGatewayRole.Arn
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        RequestTemplates:
          application/json: |
            Action=SendMessage&MessageBody=$util.urlEncode($input.json('$'))
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
    DependsOn:
      - ApiGatewayMethodSend

  # --- SNS Topic (Layer 2) ---
  EventBusTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${ResourcePrefix}-topic

  # --- Lambda Main (Layer 2, with error handling) ---
  EventBusLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ResourcePrefix}-main
      RetentionInDays: 14

  EventBusLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourcePrefix}-lambda-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SqsQueue.Arn
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref EventBusTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-main:*

  EventBusLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-main
      Handler: index.lambda_handler
      Role: !GetAtt EventBusLambdaRole.Arn
      Runtime: python3.12
      MemorySize: 256
      Timeout: 30
      Code:
        ZipFile: |
          import json, boto3, os, traceback
          sns = boto3.client("sns")

          def lambda_handler(event, context):
              print("EVENT:", json.dumps(event))
              topic_arn = os.environ["TOPIC_ARN"]

              for record in event.get("Records", []):
                  try:
                      msg = json.loads(record["body"])
                      sns.publish(TopicArn=topic_arn, Message=json.dumps(msg))
                  except Exception as e:
                      print("ERROR processing record:", e)
                      traceback.print_exc()
                      raise  # Force retry / DLQ

              return {"status": "ok"}
      Environment:
        Variables:
          TOPIC_ARN: !Ref EventBusTopic

  EventBusMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SqsQueue.Arn
      FunctionName: !Ref EventBusLambda
      BatchSize: 10
      Enabled: true

  # --- Subscriber DLQ (Layer 4) ---
  SubscriberDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ResourcePrefix}-subscriber-dummy-dlq

  # --- Subscriber SQS (Layer 3 + DLQ in Layer 4) ---
  SubscriberQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${ResourcePrefix}-subscriber-dummy-sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SubscriberDeadLetterQueue.Arn
        maxReceiveCount: 3

  SubscriberQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SubscriberQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: SQS:SendMessage
            Resource: !GetAtt SubscriberQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref EventBusTopic

  # --- SNS Subscription with Filter Policy (Layer 4) ---
  EventBusSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref EventBusTopic
      Protocol: sqs
      Endpoint: !GetAtt SubscriberQueue.Arn
      FilterPolicyScope: MessageBody
      FilterPolicy:
        event:
          - DUMMY_EVENT

  # --- Subscriber Lambda (Layer 3 + updated for Layer 4) ---
  SubscriberLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ResourcePrefix}-subscriber-dummy
      RetentionInDays: 14

  SubscriberLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ResourcePrefix}-subscriber-dummy-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SubscriberQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ResourcePrefix}-subscriber-dummy:*

  SubscriberLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ResourcePrefix}-subscriber-dummy
      Handler: index.lambda_handler
      Role: !GetAtt SubscriberLambdaRole.Arn
      Runtime: python3.12
      MemorySize: 128
      Timeout: 15
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              print("EVENT:", json.dumps(event))
              for record in event.get("Records", []):
                  body = parse_sns_message(record)
                  if body and body.get("event") == "DUMMY_EVENT":
                      print("DUMMY EVENT PAYLOAD:", json.dumps(body, indent=2))
              return {"status": "received"}

          def parse_sns_message(record):
              body = None
              try:
                  sns_envelope = json.loads(record["body"])
                  body = json.loads(sns_envelope["Message"])
              except Exception as e:
                  print("ERROR parsing message:", e)
              return body

  SubscriberMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SubscriberQueue.Arn
      FunctionName: !Ref SubscriberLambda
      BatchSize: 5
      Enabled: true

Outputs:
  ApiInvokeUrl:
    Description: Invoke URL for the API Gateway
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/send

  MainQueueUrl:
    Description: URL of the main SQS queue
    Value: !Ref SqsQueue

  MainQueueDLQUrl:
    Description: URL of the main DLQ
    Value: !Ref DeadLetterQueue

  EventBusTopicArn:
    Description: ARN of the SNS topic
    Value: !Ref EventBusTopic

  EventBusLambdaArn:
    Description: ARN of the main Lambda
    Value: !GetAtt EventBusLambda.Arn

  SubscriberQueueUrl:
    Description: URL of the subscriber SQS queue
    Value: !Ref SubscriberQueue

  SubscriberDLQUrl:
    Description: URL of the subscriber DLQ
    Value: !Ref SubscriberDeadLetterQueue

  SubscriberLambdaArn:
    Description: ARN of the subscriber Lambda
    Value: !GetAtt SubscriberLambda.Arn